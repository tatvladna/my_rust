/*
    –ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ Rust
*/

const MY_NAME: &str = "Tanya"; // —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–∂–Ω–æ –≤—ã–Ω–æ—Å–∏—Ç—å

pub fn basic_datatype() {
    println!("My name is {}!", MY_NAME);
    let mut my_name = "Tanya";
    println!("Hello, {}!", my_name);
    my_name = "Bob";
    println!("Hello, {}!", my_name);

    let r = 'ü¶Ä';
    println!("bytes: {} ", std::mem::size_of_val(&r));


    // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –Ω–µ–ª—å–∑—è, –Ω–æ –º–æ–∂–Ω–æ "–∑–∞—Ç–µ–Ω–∏—Ç—å"
    // –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ 
    let id: u32 = 555;
    println!("id: {}", id);
    let id: &str = "12345";
    println!("id: {}", id);
    let id: u32 = 1;
    println!("id: {}", id);

    let num = if id == 5 {10} else {0};
    println!("num: {}", num);


    let res: &str = match num {
        0 => "Zero",
        5 => "Five",
        10 => "Ten",
        _ => "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ",
    };
    println!("res = {}", res);

    s(id);
    println!("–†—É–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª—Å—è = {}", id);

    let res2 = q(id);
    println!("res2 = {}", res2);

    let display = ||{println!("–∞–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")};
    display();

    let mut age:u32 = 23;
    println!("–°–µ–≥–æ–¥–Ω—è –í–∞–º: {}", age);
    let mut hpb = || {
        age += 1;
        println!("–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!");
    };
    hpb();
    hpb();
    hpb();
    println!("–°–µ–≥–æ–¥–Ω—è –í–∞–º: {}", age );



    // –£–∫–∞–∑–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å –ø–∞–º—è—Ç–∏.
    // –°—Å—ã–ª–∫–∞ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ –∞–¥—Ä–µ—Å—É.
    let number = 10;
    let p_number = &number; // —Ö—Ä–∞–Ω–∏–º –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, p_number - —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    let b_number = *p_number > 50; // —Å –ø–æ–º–æ—â—å—é * –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    println!("b_number = {}", b_number);


    let k = (1, "3", 6);
    println!("{:?}", k);

    /*
        –ò–∑—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤:
            –∫–æ—Ä—Ç–µ–∂–∏ –∏ –º–∞—Å—Å–∏–≤—ã –ò–ú–ï–ÆT –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –†–ê–ó–ú–ï–†
    */
    let complex = (3.14, 1.59, "hello");
    let (a, b, _) = complex;
    println!("a = {}, b = {}", a, b);
    let complex2 = &complex;
    println!("{:?}", complex2.1);

    let my_data: (&str, u32) = (MY_NAME, 23);

    disp_compl(my_data);
    let my_data2 = my_data;
    disp_compl(my_data2);
    println!("{:?}", my_data);


    let arr1 = ["123", "4677", "789"];
    println!("{:?}", arr1);
    let arr2 = &arr1;
    println!("{:?}", arr2);
    println!("{:?}", arr1);


    bank::value();

    for i in 1..5 {
        println!("Hello, {}", i);
    }

}

fn s(mut n: u32)  {
    println!("–¥–æ = {}", n);
    n *= 10;
    println!("–ø–æ—Å–ª–µ = {}", n);
}


fn q(n:u32) -> u32 {
    return n +
    50;
}


fn disp_compl((name, age): (&str, u32))  {
    println!("–ò–º—è: {}, –í–æ–∑—Ä–∞—Å—Ç: {}", name, age);
}


mod bank {
    pub fn value() {
        println!("–í –∏–º–µ–µ—Ç–µ 0 —Ä—É–±–ª–µ–π");
    }
}